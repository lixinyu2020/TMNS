// Parameters
real nu = 1./100.;
real dt = 0.1;
real t = 0;
// Mesh
real a= 1.5, b= 5, c=15,d=0.5;
border L1(t=0,1) { x=-b; y=a-3*t; }
border L2(t=0,1) { x=-b+c*t; y=-a; }
border L3(t=0,1) { x=c-5; y=3*t-a; }
border L4(t=0,1) { x=2*b-c*t; y=a; }

int n = 5;
mesh Th1 = buildmesh(L1(2*n)+L2(10*n)+L3(2*n)+L4(10*n)); 
plot(Th1,ps="multiscale.eps",bw=1);

// Fespace
fespace Xh1(Th1, P2);
Xh1 u1, v1;
Xh1 u2, v2;
Xh1 up1, up2;
Xh1 psi, phi;
Xh1 fx;
fespace Mh1(Th1, P1);
Mh1 p, q;
real alpha = 1/dt;
real epsr=1e-8;
problem NS ([u1, u2, p], [v1, v2, q])
	= int2d(Th1)(
		  alpha*(u1*v1 + u2*v2)
		+nu * (
			  dx(u1)*dx(v1) + dy(u1)*dy(v1)
			+ dx(u2)*dx(v2) + dy(u2)*dy(v2)
		)
		- p*q*epsr
		+ p*dx(v1) + p*dy(v2)
		//- fx*v1 
		+ q*dx(u1) + q*dy(u2)
	)
	+ int2d(Th1)(
		- alpha*convect([up1, up2], -dt, up1)*v1
		- alpha*convect([up1, up2], -dt, up2)*v2
		- fx*v1
	)
                - int1d(Th1, L3)(25*p*v1)
	+ on(L2, L4, u1=0, u2=0)
	+ on(L1, u1=25*sin(pow(pi*t,2))*(1-pow(y/1.5,2)), u2=0);


// real t = 0;
for (int i = 0; i <= 1; i++) {
	// Update
	up1 = u1;
	up2 = u2;
	// Solve
	fx = 0;
	t = t+dt;
	NS;

	// Plot
	if (!(i % 1))
		plot(coef=0.2, cmm="[u1, u2] and p", p, [u1, u2], wait=1);
//定义U
real Z=5/(10^5);
real V=pow((pow(u1,2)+pow(u2,2)),(1/2));
Rn=(1/(1+Un))*(1/(1+pow(V,2));
Un=U(n-1)+(3*K)/2*z*R(n-1)-k/2*z*R(n-2);
U1=K*z;
// Rmess
real a= 1.5, b= 5, c=15,d=Un ;
border L1(t=0,1) { x=-b; y=a-3*t; }
border L2(t=0,1) { x=-b+c*t; y=d*exp(-pow(x,2))-a; }
border L3(t=0,1) { x=c-5; y=3*t-a; }
border L4(t=0,1) { x=2*b-c*t; y=a-d*exp(-pow(x,2)); }
}
plot(coef=0.2, cmm="[u1, u2] and p", p, [u1, u2]);
// Fespace
fespace Xh2(Th2, P2);
Xh2 u1, v1;
Xh2 u2, v2;
Xh2 up1, up2;
Xh2 psi, phi;
Xh2 fx;
fespace Mh2(Th2, P1);
Mh2 p, q;
// func real f1(real t) {
//        return tanh(y)/L*(1/P)*sin(2*pi*t/P);
// }
// func f2=0;

matrix A= interpolate(Th2,Th1);
matrix B = interpolate(Mh2,Mh1);

problem NS ([u1, u2, p], [v1, v2, q])
	= int2d(Th2)(
		  alpha*(u1*v1 + u2*v2)
		+nu * (
			  dx(u1)*dx(v1) + dy(u1)*dy(v1)
			+ dx(u2)*dx(v2) + dy(u2)*dy(v2)
		)
		- p*q*epsr
		+ p*dx(v1) + p*dy(v2)
		//- fx*v1 
		+ q*dx(u1) + q*dy(u2)
	)
	+ int2d(Th2)(
		- alpha*convect([up1, up2], -dt, up1)*v1
		- alpha*convect([up1, up2], -dt, up2)*v2
		- fx*v1
	)
                - int1d(Th2, L3)(25*p*v1)
	+ on(L2, L4, u1=0, u2=0)
	+ on(L1, u1=25*sin(pow(pi*t,2))*(1-pow(y/1.5,2)), u2=0);


// real t = 0;
for (int i = 0; i <= 1; i++) {
	// Update
	up1 = u1;
	up2 = u2;
	// Solve
	fx = 0;
	t = t+dt;
	NS;

	// Plot
	if (!(i % 1))
		plot(coef=0.2, cmm="[u1, u2] and p", p, [u1, u2], wait=1);

// Re-calculate stream-lines
// streamlines;
// plot(psi, wait=1);
